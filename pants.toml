[GLOBAL]
pants_version = "2.18.0"

# Register functionality from these backends.
backend_packages = [
    "pants.backend.docker",
    "pants.backend.python",
    "pants.backend.build_files.fmt.black",
    "pants.backend.python.lint.black",
    "pants.backend.python.lint.docformatter",
    "pants.backend.experimental.python.lint.ruff",
]

# Pants `goal` argument settings
[generate-lockfiles]
diff = true

# Pants `sub system` settings
[anonymous-telemetry]
enabled = false

[environments-preview.names]
macos = "//:local_env_macos"
docker_linux_x86_64 = "//:docker_env_linux_x86_64"
docker_linux_arm64 = "//:docker_env_linux_arm64"

[docker]
build_args = ["APP", "ENVIRONMENT", "GIT_COMMIT",]
run_args = "--rm -it"

[source]
root_patterns = ["/"]

[python]
interpreter_constraints = ["CPython==3.10.*"]
enable_resolves = true

[python.resolves]
python-default = "3rdparty/python-default.lock"
black = "3rdparty/black.lock"
coverage-py = "3rdparty/coverage-py.lock"
docformatter = "3rdparty/docformatter.lock"
pytest = "3rdparty/pytest.lock"
ruff = "3rdparty/ruff.lock"

[black]
install_from_resolve = "black"
requirements = ["//3rdparty:reqs_black"]
interpreter_constraints = ["CPython==3.10.*"]

[coverage-py]
install_from_resolve = "coverage-py"
requirements = ["//3rdparty:reqs_coverage-py"]
report = ["xml", "console"]

[docformatter]
install_from_resolve = "docformatter"
requirements = ["//3rdparty:reqs_docformatter"]

[pytest]
install_from_resolve = "pytest"
requirements = ["//3rdparty:reqs_pytest"]
args = ["-vv", "--no-header"]

[ruff]
install_from_resolve = "ruff"
requirements = ["//3rdparty:reqs_ruff"]
